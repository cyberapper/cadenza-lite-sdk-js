/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/health": {
    /**
     * Health check
     * @description Health check
     */
    get: operations["healthCheck"];
  };
  "/api/v2/client/getInfo": {
    /**
     * Get user information
     * @description Check available exchange types in user information
     */
    get: operations["getClientInfo"];
  };
  "/api/v2/exchange/addExchangeAccount": {
    /**
     * Add exchange account
     * @description Add exchange account
     */
    post: operations["addExchangeAccount"];
  };
  "/api/v2/exchange/listExchangeAccounts": {
    /**
     * List exchange accounts
     * @description List exchange accounts
     */
    get: operations["listExchangeAccounts"];
  };
  "/api/v2/exchange/updateExchangeAccount": {
    /**
     * Update exchange account
     * @description Update exchange account, now only support Binance account API key and secret
     */
    post: operations["updateExchangeAccount"];
  };
  "/api/v2/exchange/removeExchangeAccount": {
    /**
     * Remove exchange account
     * @description Remove exchange account, now only support Binance account API key and secret
     */
    post: operations["removeExchangeAccount"];
  };
  "/api/v2/market/listSymbolInfo": {
    /**
     * List available exchange symbols
     * @description List available exchange symbols
     */
    get: operations["listSymbolInfo"];
  };
  "/api/v2/market/ticker": {
    /**
     * Symbol price
     * @description Symbol price
     */
    get: operations["ticker"];
  };
  "/api/v2/market/orderbook": {
    /**
     * Order book
     * @description Get order book
     */
    get: operations["orderBook"];
  };
  "/api/v2/market/kline": {
    /**
     * Historical kline data
     * @description Get historical kline data
     */
    get: operations["kline"];
  };
  "/api/v2/exchange/setExchangePriority": {
    /**
     * Set the priority of exchanges
     * @description Set the priority of exchanges
     */
    post: operations["setExchangePriority"];
  };
  "/api/v2/trading/placeOrder": {
    /**
     * Place order
     * @description Place order
     */
    post: operations["placeOrder"];
  };
  "/api/v2/trading/cancelOrder": {
    /**
     * Cancel order
     * @description Cancel order. If the order is already filled, it will return an error.
     */
    post: operations["cancelOrder"];
  };
  "/api/v2/trading/listOrders": {
    /**
     * List orders
     * @description List orders
     */
    get: operations["listOrders"];
  };
  "/api/v2/trading/fetchQuotes": {
    /**
     * Quote request
     * @description Quote request
     */
    post: operations["fetchQuotes"];
  };
  "/api/v2/portfolio/listCredit": {
    /**
     * List credit
     * @description List credit
     */
    get: operations["listCredit"];
  };
  "/api/v2/portfolio/listBalances": {
    /**
     * List balances
     * @description List balances
     */
    get: operations["listBalances"];
  };
  "/api/v2/portfolio/listPositions": {
    /**
     * List positions
     * @description List positions
     */
    get: operations["listPositions"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    addExchangeRequest: {
      exchangeType: components["schemas"]["exchangeType"];
      /**
       * @description API key
       * @example my_api_key
       */
      apiKey: string;
      /**
       * @description API secret
       * @example my_api_secret
       */
      apiSecret: string;
      /**
       * @description Exchange account name, Available characters: a-z, A-Z, 0-9, _, ' '(space)
       * @example my_exchange
       */
      exchangeAccountName: string;
      /**
       * @description Environment(0 - real, 1 - sandbox)
       * @example 0
       * @enum {integer}
       */
      environment: 0 | 1;
    };
    updateExchangeRequest: {
      /**
       * Format: uuid
       * @description Exchange account ID
       */
      exchangeAccountId: string;
      /**
       * @description Exchange account name, Available characters: a-z, A-Z, 0-9, _, ' '(space)
       * @example my_exchange
       */
      exchangeAccountName?: string;
      /**
       * @description API key
       * @example my_api_key
       */
      apiKey?: string;
      /**
       * @description API secret
       * @example my_api_secret
       */
      apiSecret?: string;
    };
    placeOrderRequest: {
      /**
       * Format: uuid
       * @description Exchange account ID
       */
      exchangeAccountId: string;
      /** @description Levarage */
      leverage?: number;
      /** @description Order side */
      orderSide: components["schemas"]["orderSide"];
      /** @description Order type */
      orderType: components["schemas"]["orderType"];
      /**
       * Format: uuid
       * @description Position ID for closing position in margin trading
       */
      positionId?: string;
      /** @description Price */
      price?: number;
      /** @description Price slippage tolerance, range: [0, 0.1] with 2 decimal places */
      priceSlippageTolerance?: number;
      /** @description Quantity. One of quantity or quoteQuantity must be provided. If both is provided, only quantity will be used. */
      quantity?: number;
      /** @description Quote Quantity */
      quoteQuantity?: number;
      /**
       * @description Symbol
       * @example BTC/USDT
       */
      symbol?: string;
      /** @description Time in force */
      timeInForce?: components["schemas"]["timeInForce"];
      routePolicy?: components["schemas"]["routePolicy"];
      /**
       * @description Priority list of exchange account ID in descending order
       * @example [
       *   "exchange_account_id_1",
       *   "exchange_account_id_2",
       *   "exchange_account_id_3"
       * ]
       */
      priority?: string[];
      quoteId?: string;
    };
    /**
     * @description Exchange type
     * @enum {string}
     */
    exchangeType: "BINANCE" | "B2C2" | "WINTERMUTE" | "BLOCKFILLS" | "STONEX";
    cancelOrderRequest: {
      /** @description Order ID */
      orderId: string;
    };
    /**
     * @description Unix timestamp in milliseconds
     * @example 1632933600000
     */
    millisecond: number;
    /** @enum {string} */
    interval: "1s" | "1m" | "5m" | "15m" | "30m" | "1h" | "2h" | "1d" | "1w";
    ticker: {
      /** @description Ask price */
      askPrice?: number;
      /** @description Ask quantity */
      askQuantity?: number;
      /** @description Bid price */
      bidPrice?: number;
      /** @description Bid quantity */
      bidQuantity?: number;
      exchangeType?: components["schemas"]["exchangeType"];
      /** @description Last price */
      lastPrice?: number;
      /** @description Last quantity */
      lastQuantity?: number;
      /**
       * @description Symbol
       * @example BTC/USDT
       */
      symbol: string;
      /** @description Timestamp */
      timestamp: number;
    };
    orderbook: {
      asks?: number[][];
      bids?: number[][];
      exchangeType?: string;
      symbol?: string;
    };
    ohlcv: {
      /** @description Close price */
      c?: number;
      /** @description High price */
      h?: number;
      /** @description Low price */
      l?: number;
      /** @description Open price */
      o?: number;
      /** @description Start time (in unix milliseconds) */
      t?: number;
      /** @description Volume */
      v?: number;
    };
    /**
     * @description Order side
     * @enum {string}
     */
    orderSide: "BUY" | "SELL";
    /**
     * @description Order type
     * @enum {string}
     */
    orderType: "MARKET" | "LIMIT" | "STOP_LOSS" | "STOP_LOSS_LIMIT" | "TAKE_PROFIT" | "TAKE_PROFIT_LIMIT" | "QUOTED";
    /**
     * @description Order status
     * @enum {string}
     */
    orderStatus: "SUBMITTED" | "OPEN" | "PARTIALLY_FILLED" | "FILLED" | "CANCELED" | "PENDING_CANCEL" | "REJECTED" | "EXPIRED" | "REVOKED";
    /**
     * @description Time in force
     * @enum {string}
     */
    timeInForce: "DAY" | "GTC" | "GTX" | "GTD" | "OPG" | "CLS" | "IOC" | "FOK" | "GFA" | "GFS" | "GTM" | "MOO" | "MOC" | "EXT";
    /**
     * @description Security type
     * @enum {string}
     */
    securityType: "CASH" | "STOCK" | "CRYPTO" | "DERIVATIVE" | "OPTION" | "FUTURE" | "FOREX" | "COMMODITY";
    /**
     * @description Route policy
     * @enum {string}
     */
    routePolicy: "PRIORITY" | "INDICATED_ORDER";
    order: {
      /** @description The total cost of this order. */
      cost: number;
      /**
       * @description Created timestamp
       * @example 1703052635110
       */
      createdAt: number;
      exchangeType: components["schemas"]["exchangeType"];
      /**
       * Format: uuid
       * @description Exchange account ID
       */
      exchangeAccountId: string;
      /** @description The quantity of this order that has been filled. */
      filled: number;
      /** Format: uuid */
      orderId?: string;
      orderSide: components["schemas"]["orderSide"];
      orderType: components["schemas"]["orderType"];
      /**
       * Format: uuid
       * @description Position ID
       */
      positionId?: string;
      /** @description Price */
      price?: number;
      /** @description Quantity */
      quantity: number;
      /** @description Quote Quantity */
      quoteQuantity?: number;
      status: components["schemas"]["orderStatus"];
      /**
       * @description Symbol
       * @example BTC/USDT
       */
      symbol: string;
      timeInForce: components["schemas"]["timeInForce"];
      /**
       * @description Last updated timestamp
       * @example 1703052635111
       */
      updatedAt: number;
      /**
       * Format: uuid
       * @description User ID
       */
      userId: string;
    };
    quoteWithOrderCandidates: {
      /**
       * Format: uuid
       * @description Exchange account ID
       */
      exchangeAccountId?: string;
      exchangeType?: components["schemas"]["exchangeType"];
      /**
       * @description Base currency
       * @example BTC
       */
      baseCurrency?: string;
      /**
       * @description Quote currency
       * @example USDT
       */
      quoteCurrency?: string;
      /**
       * @description Ask price
       * @example 42859.99
       */
      askPrice?: number;
      /**
       * @description Ask quantity
       * @example 1
       */
      askQuantity?: number;
      /**
       * @description Bid price
       * @example 42859.71
       */
      bidPrice?: number;
      /**
       * @description Bid quantity
       * @example 1
       */
      bidQuantity?: number;
      /**
       * @description Timestamp
       * @example 1632933600000
       */
      timestamp?: number;
      orderCandidates?: {
          orderSide?: components["schemas"]["orderSide"];
          orderType?: components["schemas"]["orderType"];
          /**
           * @description Quantity
           * @example 1
           */
          quantity?: number;
          /**
           * @description Symbol
           * @example BTC/USDT
           */
          symbol?: string;
        }[];
      /**
       * @description Unique quote id provided by the exchange
       * @example quote_id
       */
      quoteId?: string;
    };
    exchangeBalance: {
      /**
       * Format: uuid
       * @description Exchange account ID
       */
      exchangeAccountId: string;
      /** @description List of balances */
      balances: {
          /**
           * @description Asset
           * @example BTC/USDT
           */
          asset: string;
          /**
           * @description Free balance
           * @example 1
           */
          free: number;
          /**
           * @description Locked balance
           * @example 0
           */
          locked: number;
        }[];
    };
    exchangePosition: {
      /**
       * Format: uuid
       * @description Exchange account ID
       */
      exchangeAccountId?: string;
      /** @description List of positions */
      positions?: ({
          /** @description Amount */
          amount: number;
          /** @description Cost */
          cost?: number;
          /** @description Entry price */
          entryPrice?: number;
          /**
           * @description Position side
           * @enum {string}
           */
          positionSide: "LONG" | "SHORT";
          /**
           * @description Status
           * @enum {string}
           */
          status: "OPEN";
          /**
           * @description Symbol
           * @example BTC/USDT
           */
          symbol: string;
        })[];
    };
    exchangeAccount: {
      /**
       * @description Type of account (SPOT, MARGIN)
       * @enum {string}
       */
      accountType: "SPOT" | "MARGIN";
      /** @description Exchange type */
      exchangeType?: string;
      /**
       * Format: uuid
       * @description Exchange account ID
       */
      exchangeAccountId?: string;
      /** @description Name of the exchange account */
      name: string;
      /** @description Environment of the exchange account */
      environment: string;
      /**
       * @description Status of the exchange account
       * @enum {string}
       */
      status: "ACTIVE" | "API_ERROR" | "INVALID_API" | "API_ISSUE" | "NOT_TRUSTED" | "DELETED";
    };
  };
  responses: {
    /** @description Simple text Successful response */
    okTextResponse: {
      content: {
        "text/plain": string;
      };
    };
    /** @description Simple JSON Successful response */
    okResponse: {
      content: {
        "application/json": {
          /** @default ok */
          data?: string;
        };
      };
    };
    /** @description Error response */
    errorResponse: {
      content: {
        "application/json": {
          /** @description Error code */
          code: number;
          /** @description Error message */
          error: string;
        };
      };
    };
    /** @description Authentication error response */
    AuthenticationErrorResponse: {
      content: {
        "text/html": string;
      };
    };
    /** @description Authorization error response */
    AuthorizationErrorResponse: {
      content: {
        "text/html": string;
      };
    };
    /** @description Successful Response */
    ListSymbolInfoResponse: {
      content: {
        "application/json": {
            /**
             * @description Base currency
             * @example BTC
             */
            baseSymbol?: string;
            /** @description Symbol description */
            description?: string;
            exchangeType: components["schemas"]["exchangeType"];
            /** @description Margin rate */
            marginRate?: number;
            /** @description Max quantity */
            maxQuantity?: number;
            /** @description Min quantity */
            minQuantity?: number;
            /** @description Quantity step, round lot */
            quantityStep?: number;
            /** @description Min tick, Price Tick */
            minTick?: number;
            /** @description Supported order types */
            orderTypes?: unknown[];
            /** @description Pip size */
            pipSize?: number;
            /** @description Pip value */
            pipValue?: number;
            /** @description Price precision */
            pricePrecision?: number;
            /** @description Quantity precision */
            quantityPrecision?: number;
            /**
             * @description Quoted currency
             * @example USDT
             */
            quoteSymbol?: string;
            securityType?: components["schemas"]["securityType"];
            /**
             * @description Symbol name
             * @example BTC/USDT
             */
            symbol: string;
            /** @description Supported time in force */
            timeInForce?: unknown[];
          }[];
      };
    };
  };
  parameters: {
    /**
     * @description Idempotency key is used to ensure that the same request is not processed more than once.
     * If the same request is received again, the server will return the same response as the first time.
     */
    idempotencyKeyHeader?: string;
    /** @description List of symbols */
    arraySymbols?: string[];
    /** @description Exchange type */
    exchangeType?: components["schemas"]["exchangeType"];
    /** @description Kline interval */
    interval?: components["schemas"]["interval"];
    /** @description Order ID */
    orderId?: string;
    /** @description Order status */
    orderStatus?: components["schemas"]["orderStatus"];
    /** @description Exchange account ID */
    exchangeAccountId?: string;
    /** @description Symbol */
    symbol?: string;
    /** @description Start time (in unix milliseconds) */
    startTime?: number;
    /** @description End time (in unix milliseconds) */
    endTime?: components["schemas"]["millisecond"];
    /** @description Limit the number of returned results. */
    limit?: number;
    /** @description Offset of the returned results. Default: 0 */
    offset?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Health check
   * @description Health check
   */
  healthCheck: {
    responses: {
      200: components["responses"]["okTextResponse"];
      401: components["responses"]["AuthenticationErrorResponse"];
      403: components["responses"]["AuthorizationErrorResponse"];
    };
  };
  /**
   * Get user information
   * @description Check available exchange types in user information
   */
  getClientInfo: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * @description Available exchange types
             * @example [
             *   "BINANCE",
             *   "B2C2",
             *   "WINTERMUTE"
             * ]
             */
            exchangeTypes?: string[];
          };
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Add exchange account
   * @description Add exchange account
   */
  addExchangeAccount: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["addExchangeRequest"];
      };
    };
    responses: {
      200: components["responses"]["okResponse"];
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * List exchange accounts
   * @description List exchange accounts
   */
  listExchangeAccounts: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["exchangeAccount"][];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Update exchange account
   * @description Update exchange account, now only support Binance account API key and secret
   */
  updateExchangeAccount: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["updateExchangeRequest"];
      };
    };
    responses: {
      200: components["responses"]["okResponse"];
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Remove exchange account
   * @description Remove exchange account, now only support Binance account API key and secret
   */
  removeExchangeAccount: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description Exchange account ID
           */
          exchangeAccountId: string;
        };
      };
    };
    responses: {
      200: components["responses"]["okResponse"];
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * List available exchange symbols
   * @description List available exchange symbols
   */
  listSymbolInfo: {
    parameters: {
      query?: {
        exchangeType?: components["parameters"]["exchangeType"];
        symbol?: components["parameters"]["symbol"];
        /** @description Whether to return detailed information */
        detail?: boolean;
      };
    };
    responses: {
      200: components["responses"]["ListSymbolInfoResponse"];
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Symbol price
   * @description Symbol price
   */
  ticker: {
    parameters: {
      query: {
        /** @description Exchange type */
        exchangeType?: components["schemas"]["exchangeType"];
        /** @description Symbol */
        symbol: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ticker"][];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Order book
   * @description Get order book
   */
  orderBook: {
    parameters: {
      query: {
        /** @description Exchange type */
        exchangeType: components["schemas"]["exchangeType"];
        /** @description Symbol */
        symbol: string;
        limit?: components["parameters"]["limit"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["orderbook"][];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Historical kline data
   * @description Get historical kline data
   */
  kline: {
    parameters: {
      query: {
        /** @description Exchange type */
        exchangeType: components["schemas"]["exchangeType"];
        /** @description Symbol */
        symbol: string;
        /** @description Kline interval */
        interval: components["schemas"]["interval"];
        startTime?: components["parameters"]["startTime"];
        endTime?: components["parameters"]["endTime"];
        limit?: components["parameters"]["limit"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Set the priority of exchanges
   * @description Set the priority of exchanges
   */
  setExchangePriority: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Priority list of exchanges in descending order
           * @example [
           *   "my_exchange_1",
           *   "my_exchange_2",
           *   "my_exchange_3"
           * ]
           */
          priority: string[];
        };
      };
    };
    responses: {
      200: components["responses"]["okResponse"];
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Place order
   * @description Place order
   */
  placeOrder: {
    parameters: {
      header?: {
        "Idempotency-Key"?: components["parameters"]["idempotencyKeyHeader"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["placeOrderRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["order"][];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Cancel order
   * @description Cancel order. If the order is already filled, it will return an error.
   */
  cancelOrder: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["cancelOrderRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["order"];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * List orders
   * @description List orders
   */
  listOrders: {
    parameters: {
      query?: {
        orderId?: components["parameters"]["orderId"];
        orderStatus?: components["parameters"]["orderStatus"];
        exchangeAccountId?: components["parameters"]["exchangeAccountId"];
        symbol?: components["parameters"]["symbol"];
        startTime?: components["parameters"]["startTime"];
        endTime?: components["parameters"]["endTime"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["order"][];
            /** @description Limit of the returned results */
            limit?: number;
            /** @description Offset of the returned results */
            offset?: number;
            /** @description Total number of orders */
            total?: number;
          };
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * Quote request
   * @description Quote request
   */
  fetchQuotes: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Base currency */
          baseCurrency: string;
          /** @description Quote currency */
          quoteCurrency: string;
          /** @description Quantity of base currency for quote execution */
          quantity: number;
          /**
           * Format: uuid
           * @description The identifier for the exchange account
           */
          exchangeAccountId?: string;
          /** @description Order side, BUY or SELL, required by WinterMute */
          orderSide: string;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["quoteWithOrderCandidates"][];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * List credit
   * @description List credit
   */
  listCredit: {
    parameters: {
      query?: {
        /** @description Exchange account ID */
        exchangeAccountId?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
              /** @example 018e41a1-cebc-7b49-a729-ae2c1c41e297 */
              exchangeAcccountID?: string;
              /** @example MARGIN */
              accountType?: string;
              /**
               * Format: int64
               * @example 5000000
               */
              maxRiskExposure?: number;
              /**
               * Format: double
               * @example 5677517.76
               */
              riskExposure?: number;
            }[];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * List balances
   * @description List balances
   */
  listBalances: {
    parameters: {
      query?: {
        /** @description Exchange account ID */
        exchangeAccountId?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["exchangeBalance"][];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
  /**
   * List positions
   * @description List positions
   */
  listPositions: {
    parameters: {
      query?: {
        /** @description Exchange account ID */
        exchangeAccountId?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["exchangePosition"][];
        };
      };
      400: components["responses"]["errorResponse"];
      500: components["responses"]["errorResponse"];
    };
  };
}
