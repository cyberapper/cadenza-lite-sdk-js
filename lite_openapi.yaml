openapi: 3.1.0
info:
  title: Algo724 Cadenza Lite API
  description: |-
    OpenAPI Specification for Algo724 Cadenza Lite API
  version: 1.0.0
servers:
  - url: "https://cadenza-lite.algo724.com"
    description: "Production server"
  - url: "https://cadenza-lite.uat.algo724.com"
    description: "UAT server"
  - url: "https://cadenza-lite-dev-kxqssmzmsa-de.a.run.app"
    description: "DEV server"

tags:
  - name: Account
    description: "Account management"
  - name: Market
    description: "Market data"
  - name: Trade
    description: "Trade"
  - name: Portfolio
    description: "Portfolio"

security:
  - BearerAuth: []

paths:
  /api/v2/health:
    get:
      operationId: "healthCheck"
      summary: "Health check"
      description: "Health check"
      tags:
        - Market
      responses:
        "200":
          $ref: "#/components/responses/okTextResponse"
        "401":
          $ref: "#/components/responses/AuthenticationErrorResponse"
        "403":
          $ref: "#/components/responses/AuthorizationErrorResponse"

  /api/v2/client/getInfo:
    get:
      operationId: "getClientInfo"
      summary: "Get user information"
      description: "Check available exchange types in user information"
      tags:
        - Account
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  exchangeTypes:
                    type: array
                    items:
                      type: string
                    description: "Available exchange types"
                    example: ["BINANCE", "B2C2", "WINTERMUTE"]
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
                
  /api/v2/exchange/addExchangeAccount:
    post:
      operationId: "addExchangeAccount"
      summary: "Add exchange account"
      description: "Add exchange account"
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addExchangeRequest"
      responses:
        "200":
          $ref: "#/components/responses/okResponse"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/exchange/listExchangeAccounts:
    get:
      operationId: "listExchangeAccounts"
      summary: "List exchange accounts"
      description: "List exchange accounts"
      tags:
        - Account
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/exchangeAccount"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/exchange/updateExchangeAccount:
    post:
      operationId: "updateExchangeAccount"
      summary: "Update exchange account"
      description: "Update exchange account, now only support Binance account API key and secret"
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateExchangeRequest"
      responses:
        "200":
          $ref: "#/components/responses/okResponse"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/exchange/removeExchangeAccount:
    post:
      operationId: "removeExchangeAccount"
      summary: "Remove exchange account"
      description: "Remove exchange account, now only support Binance account API key and secret"
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                exchangeAccountId:
                  type: string
                  format: uuid
                  description: "Exchange account ID"
              required:
                - exchangeAccountId
      responses:
        "200":
          $ref: "#/components/responses/okResponse"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/market/listSymbolInfo:
    get:
      operationId: "listSymbolInfo"
      summary: "List available exchange symbols"
      description: "List available exchange symbols"
      tags:
        - Market
      parameters:
        - $ref: "#/components/parameters/exchangeType"
        - $ref: "#/components/parameters/symbol"
        - in: query
          name: detail
          schema:
            type: boolean
            example: false
          required: false
          description: "Whether to return detailed information"
      responses:
        "200":
          $ref: "#/components/responses/ListSymbolInfoResponse"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/market/ticker:
    get:
      operationId: "ticker"
      summary: "Symbol price"
      description: "Symbol price"
      tags:
        - Market
      parameters:
        - in: query
          name: exchangeType
          schema:
            $ref: "#/components/schemas/exchangeType"
          description: "Exchange type"
        - in: query
          name: symbol
          schema:
            type: string
            example: "BTC/USDT"
          required: true
          description: "Symbol"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ticker"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/market/orderbook:
    get:
      operationId: "orderBook"
      summary: "Order book"
      description: "Get order book"
      tags:
        - Market
      parameters:
        - in: query
          name: exchangeType
          description: "Exchange type"
          schema:
            $ref: "#/components/schemas/exchangeType"
          required: true  
        - in: query
          name: symbol
          schema:
            type: string
            example: "BTC/USDT"
          required: true
          description: "Symbol"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/orderbook"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/market/kline:
    get:
      operationId: "kline"
      summary: "Historical kline data"
      description: "Get historical kline data"
      tags:
        - Market
      parameters:
        - in: query
          name: exchangeType
          schema:
            $ref: "#/components/schemas/exchangeType"
          required: true
          description: "Exchange type"
        - in: query
          name: symbol
          schema:
            type: string
            example: BTC/USDT
          required: true
          description: "Symbol"
        - in: query
          name: interval
          schema:
            $ref: "#/components/schemas/interval"
          required: true
          description: "Kline interval"
        - $ref: "#/components/parameters/startTime"
        - $ref: "#/components/parameters/endTime"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                allOf: 
                  -  $ref: "#/components/schemas/ohlcv"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/exchange/setExchangePriority:
    post:
      operationId: "setExchangePriority"
      summary: "Set the priority of exchanges"
      description: "Set the priority of exchanges"
      tags:
        - Trade
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "priority"
              properties:
                priority:
                  type: array
                  items:
                    type: string
                  description: Priority list of exchanges in descending order
                  example: [ "my_exchange_1", "my_exchange_2", "my_exchange_3" ]
      responses:
        "200":
          $ref: "#/components/responses/okResponse"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/trading/placeOrder:
    post:
      operationId: "placeOrder"
      summary: "Place order"
      description: "Place order"
      tags:
        - Trade
      parameters:
        - $ref: "#/components/parameters/idempotencyKeyHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/placeOrderRequest"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"

  /api/v2/trading/cancelOrder:
    post:
      operationId: "cancelOrder"
      summary: "Cancel order"
      description: "Cancel order. If the order is already filled, it will return an error."
      tags:
        - Trade
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cancelOrderRequest"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/trading/listOrders:
    get:
      operationId: "listOrders"
      summary: "List orders"
      description: "List orders"
      tags:
        - Trade
      parameters:
        - $ref: "#/components/parameters/orderId"
        - $ref: "#/components/parameters/orderStatus"
        - $ref: "#/components/parameters/exchangeAccountId"
        - $ref: "#/components/parameters/symbol"
        - $ref: "#/components/parameters/startTime"
        - $ref: "#/components/parameters/endTime"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/order"
                  limit:
                    type: integer
                    description: "Limit of the returned results"
                  offset:
                    type: integer
                    description: "Offset of the returned results"
                  total:
                    type: integer
                    description: "Total number of orders"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/trading/getQuoteExecutionReport:
    get:
      operationId: "getQuoteExecutionReport"
      summary: "Quote request"
      description: "Quote will give the best quote from all available exchange accounts"
      tags:
        - Trade
      parameters:
        - in: query
          name: quoteRequestId
          schema:
            $ref: "#/components/schemas/uuidString"
          description: "Quote request ID"
          required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/executionReport"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/trading/fetchQuotes:
    post:
      operationId: "fetchQuotes"
      summary: "Quote request"
      description: "Quote will give the best quote from all available exchange accounts"
      tags:
        - Trade
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/quoteWithOrderCandidates"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/portfolio/listCredit:
    get:
      operationId: "listCredit"
      summary: "List credit"
      description: "List credit"
      tags:
        - Portfolio
      parameters:
      - in: query
        name: exchangeAccountId
        schema:
          type: string
        description: "Exchange account ID"
        required: false
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    exchangeAcccountID:
                      type: string
                      example: "018e41a1-cebc-7b49-a729-ae2c1c41e297"
                    accountType:
                      type: string
                      example: "MARGIN"
                    maxRiskExposure:
                      type: integer
                      format: int64
                      example: 5000000
                    riskExposure:
                      type: number
                      format: double
                      example: 5677517.76
                description: "List of credit"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/portfolio/listBalances:
    get:
      operationId: "listBalances"
      summary: "List balances"
      description: "List balances"
      tags:
        - Portfolio
      parameters:
      - in: query
        name: exchangeAccountId
        schema:
          type: string
        description: "Exchange account ID"
        required: false
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/exchangeBalance"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"
  /api/v2/portfolio/listPositions:
    get:
      operationId: "listPositions"
      summary: "List positions"
      description: "List positions"
      tags:
        - Portfolio
      parameters:
      - in: query
        name: exchangeAccountId
        schema:
          type: string
        description: "Exchange account ID"
        required: false
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/exchangePosition"
        "400":
          $ref: "#/components/responses/errorResponse"
        "500":
          $ref: "#/components/responses/errorResponse"

components:
  parameters:
    # MARK: Header
    idempotencyKeyHeader:
      in: header
      name: Idempotency-Key
      description:  |-
        Idempotency key is used to ensure that the same request is not processed more than once.
        If the same request is received again, the server will return the same response as the first time.
      schema:
        type: string
        example: "my_idempotency_key"

    # MARK: Query Parameter, Optional
    arraySymbols:
      in: query
      name: symbol
      description: "List of symbols"
      schema:
        type: array
        items:
          type: string
        example: ["BTC/USDT", "ETH/USDT"]

    exchangeType:
      in: query
      name: exchangeType
      description: "Exchange type"
      schema:
        $ref: "#/components/schemas/exchangeType"
      
    interval:
      in: query
      name: interval
      description: "Kline interval"
      schema:
        $ref: "#/components/schemas/interval"

    orderId:
      in: query
      name: orderId
      schema:
        type: string
      description: "Order ID"
    orderStatus:
      in: query
      name: orderStatus
      description: "Order status"
      schema: 
        $ref: "#/components/schemas/orderStatus"
    exchangeAccountId:
      in: query
      name: exchangeAccountId
      schema:
        type: string
      description: "Exchange account ID"
    symbol:
      in: query
      name: symbol
      schema:
        type: string
      description: "Symbol"
    startTime:
      in: query
      name: startTime
      schema:
        type: integer
        example: 1622505600000
      description: "Start time (in unix milliseconds)"
    endTime:
      in: query
      name: endTime
      schema:
        $ref: "#/components/schemas/millisecond"
      description: "End time (in unix milliseconds)"
    limit:
      in: query
      name: limit
      schema:
        type: integer
        example: 100
      description: "Limit the number of returned results."
    offset:
      in: query
      name: offset
      schema:
        type: integer
        example: 0
      description: "Offset of the returned results. Default: 0"




  responses:
    # MARK: Response
    okTextResponse:
      description: "Simple text Successful response"
      content:
        text/plain:
          schema:
            type: string
            default: ok
    okResponse:
      description: "Simple JSON Successful response"
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                default: ok
                type: string
    errorResponse:
      description: "Error response"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                description: "Error code"
              error:
                type: string
                description: "Error message"
            required:
              - code
              - error
    AuthenticationErrorResponse:
      description: "Authentication error response"
      content:
        text/html:
          schema:
            type: string
    AuthorizationErrorResponse:
      description: "Authorization error response"
      content:
        text/html:
          schema:
            type: string
    
    ListSymbolInfoResponse:
      description: Successful Response
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                baseSymbol:
                  type: string
                  description: Base currency
                  example: BTC
                description:
                  type: string
                  description: Symbol description
                exchangeType:
                  $ref: "#/components/schemas/exchangeType"
                marginRate:
                  type: number
                  description: Margin rate
                maxQuantity:
                  type: number
                  description: Max quantity
                minQuantity:
                  type: number
                  description: Min quantity
                quantityStep:
                  type: number
                  description: Quantity step, round lot
                minTick:
                  type: number
                  description: Min tick, Price Tick
                orderTypes:
                  description: Supported order types
                  type: array
                  allOf: 
                    -  $ref: "#/components/schemas/orderType"
                pipSize:
                  type: number
                  description: Pip size
                pipValue:
                  type: number
                  description: Pip value
                pricePrecision:
                  type: integer
                  description: Price precision
                quantityPrecision:
                  type: integer
                  description: Quantity precision
                quoteSymbol:
                  type: string
                  description: Quoted currency
                  example: USDT
                securityType:
                  $ref: "#/components/schemas/securityType"
                symbol:
                  type: string
                  description: Symbol name
                  example: BTC/USDT
                timeInForce:
                  type: array
                  description: Supported time in force
                  allOf: 
                    - $ref: "#/components/schemas/timeInForce"
              required:
                - exchangeType
                - symbol

  schemas:    
    # MARK: Request
    addExchangeRequest:
      type: object
      properties:
        exchangeType:
          $ref: "#/components/schemas/exchangeType"
        apiKey:
          type: string
          example: "my_api_key"
          description: "API key"
        apiSecret:
          type: string
          example: "my_api_secret"
          description: "API secret"
        exchangeAccountName:
          type: string
          example: "my_exchange"
          description: "Exchange account name, Available characters: a-z,
            A-Z, 0-9, _, ' '(space)"
        environment:
          type: integer
          enum:
            - 0
            - 1
          example: 0
          description: "Environment(0 - real, 1 - sandbox)"
      required:
        - exchangeType
        - apiKey
        - apiSecret
        - exchangeAccountName
        - environment
    updateExchangeRequest:
      type: object
      properties:
        exchangeAccountId:
          type: string
          format: uuid
          description: "Exchange account ID"
        exchangeAccountName:
          type: string
          example: "my_exchange"
          description: "Exchange account name, Available characters: a-z,
            A-Z, 0-9, _, ' '(space)"
        apiKey:
          type: string
          example: "my_api_key"
          description: "API key"
        apiSecret:
          type: string
          example: "my_api_secret"
          description: "API secret"
      required:
        - exchangeAccountId
    placeOrderRequest:
      type: object
      properties:
        quoteRequestId:
          description: "Quote request ID"
          $ref: "#/components/schemas/uuidString"
        exchangeAccountId:
          description: "Exchange account ID"
          $ref: "#/components/schemas/uuidString"
        leverage:
          description: "Levarage"
          type: integer
        orderSide:
          allOf:
          - $ref: "#/components/schemas/orderSide"
          description: Order side
        orderType:
          allOf:
          - $ref: "#/components/schemas/orderType"
          description: Order type
        positionId:
          type: string
          description: Position ID for closing position in margin trading
          format: uuid
        price:
          type: number
          description: Price
        priceSlippageTolerance:
          type: number
          description: "Price slippage tolerance, range: [0, 0.1] with 2 decimal places"
        quantity:
          type: number
          description: Quantity. One of quantity or quoteQuantity must be provided. If both is provided, only quantity will be used.
        quoteQuantity:
          type: number
          description: Quote Quantity
        symbol:
          type: string
          description: Symbol
          example: BTC/USDT
        timeInForce:
          allOf:
            - $ref: "#/components/schemas/timeInForce"
          description: Time in force
        routePolicy:
          $ref: "#/components/schemas/routePolicy"
        priority:
          type: array
          items:
            type: string
          description: "Priority list of exchange account ID in descending order"
          example: ["exchange_account_id_1", "exchange_account_id_2", "exchange_account_id_3"]
        quoteId:
          type: string
          description: Quote ID used by exchange for RFQ, e.g. WINTERMUTE need this field to execute QUOTED order
    exchangeType:
      type: string
      enum:
        - BINANCE
        - B2C2
        - WINTERMUTE
        - BLOCKFILLS
        - STONEX
      description: "Exchange type"
    uuidString:
      type: string
      format: uuid
      description: "UUID string"
    
    cancelOrderRequest:
      type: object
      properties:
        orderId:
          type: string
          description: "Order ID"
      required:
        - orderId


    # MARK: Model
    # General
    millisecond:
      type: integer
      example: 1632933600000
      description: "Unix timestamp in milliseconds"

    # MARK: Market Data Model
    interval:
      type: string
      enum:
        - 1s
        - 1m
        - 5m
        - 15m
        - 30m
        - 1h
        - 2h
        - 1d
        - 1w
    ticker:
      properties:
        askPrice:
          type: number
          description: Ask price
        askQuantity:
          type: number
          description: Ask quantity
        bidPrice:
          type: number
          description: Bid price
        bidQuantity:
          type: number
          description: Bid quantity
        exchangeType:
          $ref: "#/components/schemas/exchangeType"
        lastPrice:
          type: number
          description: Last price
        lastQuantity:
          type: number
          description: Last quantity
        symbol:
          type: string
          description: Symbol
          example: BTC/USDT
        timestamp:
          type: integer
          description: Timestamp
      required:
        - exchange
        - symbol
        - timestamp
      type: object
    orderbook:
      type: object
      properties:
        asks:
          type: array
          items:
            type: array
            items:
              type: number
        bids:
          type: array
          items:
            type: array
            items:
              type: number
        exchangeType:
          type: string
        symbol:
          type: string
    ohlcv:
      type: object
      properties:
        c:
          type: number
          description: Close price
        h:
          type: number
          description: High price
        l:
          type: number
          description: Low price
        o:
          type: number
          description: Open price
        t:
          type: integer
          description: "Start time (in unix milliseconds)"
        v:
          type: number
          description: Volume
    # MARK: Trading Model
    orderSide:
      type: string
      enum:
        - BUY
        - SELL
      description: "Order side"
    orderType:
      type: string
      enum:
        - MARKET
        - LIMIT
        - STOP_LOSS
        - STOP_LOSS_LIMIT
        - TAKE_PROFIT
        - TAKE_PROFIT_LIMIT
        - QUOTED
      description: "Order type"
    orderStatus:
      type: string
      enum:
        - SUBMITTED
        - ACCEPTED
        - OPEN
        - PARTIALLY_FILLED
        - FILLED
        - CANCELED
        - PENDING_CANCEL
        - REJECTED
        - EXPIRED
        - REVOKED
      description: "Order status"
    timeInForce:
      type: string
      enum:
        - DAY
        - GTC
        - GTX
        - GTD
        - OPG
        - CLS
        - IOC
        - FOK
        - GFA
        - GFS
        - GTM
        - MOO
        - MOC
        - EXT
      description: "Time in force"
    securityType:
      type: string
      description: Security type
      enum:
        - SPOT
        - CASH
        - STOCK
        - CRYPTO
        - DERIVATIVE
        - OPTION
        - FUTURE
        - FOREX
        - COMMODITY
    routePolicy:
      type: string
      enum:
        - PRIORITY
        - QUOTE
      description: "Route policy. For PRIORITY, the order request will be routed to the exchange account with the highest priority. For QUOTE, the system will execute the execution plan based on the quote. Order request with route policy QUOTE will only accept two parameters, quoteRequestId and priceSlippageTolerance"
    order:
      type: object
      properties:
        cost:
          type: number
          description: The total cost of this order.
        createdAt:
          type: integer
          description: "Created timestamp"
          example: 1703052635110
        exchangeType:
          $ref: "#/components/schemas/exchangeType"
        exchangeAccountId:
          type: string
          format: uuid
          description: "Exchange account ID"
        filled:
          type: number
          description: The quantity of this order that has been filled.
        orderId:
          type: string
          format: uuid
        orderSide:
          $ref: "#/components/schemas/orderSide"
        orderType:
          $ref: "#/components/schemas/orderType"
        positionId:
          type: string
          description: Position ID
          format: uuid
        price:
          type: number
          description: Price
        quantity:
          type: number
          description: Quantity
        quoteQuantity:
          type: number
          description: Quote Quantity
        status:
          $ref: "#/components/schemas/orderStatus"
        symbol:
          type: string
          description: Symbol
          example: BTC/USDT
        timeInForce:
          $ref: "#/components/schemas/timeInForce"
        updatedAt:
          type: integer
          description: Last updated timestamp
          example: 1703052635111
        userId:
          type: string
          description: "User ID"
          format: uuid
        fee:
          type: number
          description: Fee
          example: 0.0
        feeCurrency:
          type: string
          description: Fee currency
          example: USDT
      required:
        - id
        - userId
        - exchangeAccountId
        - exchangeType
        - symbol
        - quantity
        - orderType
        - orderSide
        - timeInForce
        - cost
        - filled
        - status
        - updatedAt
        - createdAt
    quoteRequest:
      type: object
      properties:
        baseCurrency:
          type: string
          description: Base currency is the currency you want to buy or sell
        quoteCurrency:
          type: string
          description: Quote currency is the currency you want to pay or receive, and the price of the base currency is quoted in the quote currency
        orderSide:
          type: string
          description: Order side, BUY or SELL
        quantity:
          type: number
          description: Amount of the base currency
        quoteQuantity:
          type: number
          description: Amount of the quote currency
        exchangeAccountId:
          description: The identifier for the exchange account
          $ref: "#/components/schemas/uuidString"
      required:
        - baseCurrency
        - quoteCurrency
        - orderSide
        # - quantity or quoteQuantity
    quoteWithOrderCandidates:
      type: object
      properties:
        quoteRequestId:
          description: "Quote request ID"
          $ref: "#/components/schemas/uuidString"
        baseCurrency:
          type: string
          description: Base currency
          example: BTC
        quoteCurrency:
          type: string
          description: Quote currency
          example: USDT
        askPrice: 
          type: number
          description: Ask price
          example: 42859.99
        askQuantity:
          type: number
          description: Ask quantity
          example: 1.0
        bidPrice:
          type: number
          description: Bid price
          example: 42859.71
        bidQuantity:
          type: number
          description: Bid quantity
          example: 1.0
        timestamp:
          description: "Create time of the quote"
          $ref: "#/components/schemas/millisecond"
        validUntil:
          description: "Expiration time of the quote"
          $ref: "#/components/schemas/millisecond"
        orderCandidates:
          type: array
          items:
            type: object
            properties:
              quoteRequestId:
                type: string
                description: "Quote request ID"
                format: uuid
              exchangeAccountId:
                type: string
                format: uuid
                description: "Exchange account ID"
              orderSide:
                $ref: "#/components/schemas/orderSide"
              orderType:
                $ref: "#/components/schemas/orderType"
              quantity:
                type: number
                description: Quantity
                example: 1.0
              quoteQuantity:
                type: number
                description: Quote Quantity
                example: 42859.99
              symbol:
                type: string
                description: Symbol
                example: BTC/USDT
              routePolicy:
                $ref: "#/components/schemas/routePolicy"
      required: 
        - quoteRequestId
        - baseCurrency
        - quoteCurrency
        - timestamp
        - validUntil
        # askQuantity and askPrice or bidQuantity and bidPrice
    executionReport:
      type: object
      properties:
        id:
          description: "Execution Report ID"
          $ref: "#/components/schemas/uuidString"
        baseCurrency:
          type: string
          description: Base currency
          example: BTC
        quoteCurrency:
          type: string
          description: Quote currency
          example: USDT
        filled:
          type: number
          description: Filled quantity, the quantity of the base currency executed
          example: 1.0
        cost:
          type: number
          description: Cost, the total cost of the quote
          example: 42859.99
        status:
          description: Status of the quote execution, should only have SUBMITTED, ACCEPTED, PARTIALLY_FILLED, FILLED, EXPIRED. the final status of the quote execution should be either FILLED or EXPIRED
          $ref: "#/components/schemas/orderStatus"
        createdAt:
          description: "Create time of the quote"
          $ref: "#/components/schemas/millisecond"
        updatedAt:
          description: "Last updated time of the quote execution"
          $ref: "#/components/schemas/millisecond"
        executedPrice:
          type: number
          description: "Executed price of the quote"
          example: 1013.5483
        fees:
          type: object
          description: "Fees associated with the quote execution"
          additionalProperties:
            type: number
          example:
            USDT: 0.012
        orderSide:
          type: string
          description: "Side of the order, either BUY or SELL"
          example: "SELL"
        routePolicy:
          type: string
          description: "Route policy for the quote execution"
          example: "QUOTE"
        orders:
          type: array
          description: "List of orders to fulfill the quote, the order status should only have FILLED, REJECTED, or EXPIRED"
          allOf:
            - $ref: "#/components/schemas/order"
      required: 
        - id
        - baseCurrency
        - quoteCurrency
        - filled
        - cost
        - status
        - createdAt
        - updatedAt
        - executedPrice
        - fees
        - orderSide
        - routePolicy

    
    exchangeBalance:
      type: object
      properties:
        exchangeAccountId:
          type: string
          description: "Exchange account ID"
          format: uuid
        balances:
          type: array
          description: "List of balances"
          items:
            type: object
            properties:
              asset:
                type: string
                description: "Asset"
                example: BTC/USDT
              free:
                type: number
                description: Free balance
                example: 1.0
              locked:
                type: number
                description: Locked balance
                example: 0.0
            required:
              - asset
              - free
              - locked
      required:
        - exchangeAccountId
        - balances
    exchangePosition:
      type: object
      properties:
        exchangeAccountId:
          type: string
          description: "Exchange account ID"
          format: uuid
        positions:
          type: array
          description: "List of positions"
          items:
            type: object
            properties:
              amount:
                type: number
                description: Amount
              cost:
                type: number
                description: Cost
              entryPrice:
                type: number
                description: Entry price
              positionSide:
                type: string
                description: Position side
                enum:
                  - LONG
                  - SHORT
              status:
                type: string
                description: Status
                enum:
                  - OPEN
                  # - CLOSED
              symbol:
                type: string
                description: Symbol
                example: BTC/USDT
            required:
              - amount
              - positionSide
              - status
              - symbol
            description: "List of positions"
    exchangeAccount:
      properties:
        accountType:
          type: string
          enum:
            - SPOT
            - MARGIN
          description: "Type of account (SPOT, MARGIN)"
        exchangeType:
          type: string
          description: "Exchange type"
        exchangeAccountId:
          type: string
          format: uuid
          description: "Exchange account ID"
        name:
          type: string
          description: "Name of the exchange account"
        environment:
          type: string
          description: "Environment of the exchange account"
        status:
          type: string
          enum:
            - ACTIVE
            - API_ERROR
            - INVALID_API
            - API_ISSUE
            - NOT_TRUSTED
            - DELETED
          description: "Status of the exchange account"
      required:
        - id
        - name
        - exchange
        - environment
        - status
        - accountType

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
